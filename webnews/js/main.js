document.addEventListener("DOMContentLoaded", async function () {
    await loadNews();
    await loadNavbar();
    setupFormHandlers();
    setupBetaTestToggle();
    await loadCategories(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await loadNews(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
});

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –Ω–∏–º.
 */
async function loadCategories() {
    try {
        const response = await fetch("webnews/data/news.json");
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");

        const { news } = await response.json();
        const categories = new Set(news.map(item => item.category)); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        const categoryContainer = document.createElement("div");
        categoryContainer.id = "category-container";

        // –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏"
        const allButton = document.createElement("button");
        allButton.textContent = "–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏";
        allButton.classList.add("category-btn", "active");
        allButton.dataset.category = "all";
        categoryContainer.appendChild(allButton);

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories.forEach(category => {
            const button = document.createElement("button");
            button.textContent = category;
            button.classList.add("category-btn");
            button.dataset.category = category;
            categoryContainer.appendChild(button);
        });

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ—Å—Ç—è–º–∏
        const mainContainer = document.getElementById("news-container");
        mainContainer.before(categoryContainer);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.querySelectorAll(".category-btn").forEach(button => {
            button.addEventListener("click", function () {
                document.querySelectorAll(".category-btn").forEach(btn => btn.classList.remove("active"));
                this.classList.add("active");
                filterNews(this.dataset.category);
            });
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
 */
async function loadNews() {
    try {
        const response = await fetch("webnews/data/news.json");
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π");

        const { news } = await response.json();
        const newsContainer = document.getElementById("news-container");
        newsContainer.innerHTML = "";

        news.forEach(item => {
            const newsItem = document.createElement("div");
            newsItem.classList.add("news-item");
            newsItem.dataset.category = item.category; // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–∏
            const img = document.createElement("img");
            img.src = item.image;
            img.alt = item.title;

            const title = document.createElement("h2");
            title.textContent = item.title;

            const summary = document.createElement("p");
            summary.textContent = item.summary;

            const content = document.createElement("p");
            content.textContent = item.content;
            content.classList.add("hidden"); // –°–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏

            const metaInfo = document.createElement("div");
            metaInfo.classList.add("news-meta");
            metaInfo.innerHTML = `
                <span>${formatDate(item.date)}</span>
                <span> | ${item.author}</span>
                <span> | ${item.category}</span>
            `;

            // –ö–Ω–æ–ø–∫–∞ "–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ"
            const readMoreBtn = document.createElement("button");
            readMoreBtn.textContent = "–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ";
            readMoreBtn.classList.add("read-more-btn");
            readMoreBtn.addEventListener("click", () => {
                content.classList.toggle("hidden");
                readMoreBtn.textContent = content.classList.contains("hidden") ? "–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ" : "–°–∫—Ä—ã—Ç—å";
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            newsItem.append(img, title, summary, metaInfo, readMoreBtn, content);
            newsContainer.appendChild(newsItem);
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:", error);
    }
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
 */
function filterNews(category) {
    const newsItems = document.querySelectorAll(".news-item");

    newsItems.forEach(item => {
        item.style.display = category === "all" || item.dataset.category === category ? "block" : "none";
    });
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.
 */
function formatDate(isoString) {
    const options = { year: "numeric", month: "long", day: "numeric", hour: "2-digit", minute: "2-digit" };
    return new Date(isoString).toLocaleDateString("ru-RU", options);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞.
 */
async function loadNavbar() {
    try {
        const response = await fetch("webnews/nav/navbar.html");
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏");

        const navbarContainer = document.getElementById("navbar-container");
        navbarContainer.innerHTML = await response.text();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏:", error);
    }
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
 */
function setupFormHandlers() {
    const form = document.getElementById("contact-form");
    if (!form) return;

    form.addEventListener("submit", async function (event) {
        event.preventDefault();

        const botToken = "7745335635:AAGbPdzXplwqbMky-xgJ9KOhsWln5z6toYo";  // –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
        const chatId = "250356592";  // –¢–≤–æ–π chat_id

        const name = document.getElementById("name").value.trim();
        const email = document.getElementById("email").value.trim();
        const message = document.getElementById("message").value.trim();
        const betaTest = document.getElementById("beta-test").checked ? "‚úÖ –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ" : "‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ";

        if (!name || !message) {
            showStatus("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!", "red");
            return;
        }

        const text = `üÜï *WebNews –ó–∞–ø—Ä–æ—Å:*\n\n` +
                     `üìù *–ò–º—è:* ${name}\n` +
                     `üìß *Email:* ${email || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
                     `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${message}\n` +
                     `üöÄ *–ë–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:* ${betaTest}`;

        try {
            const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: chatId,
                    text: text,
                    parse_mode: "Markdown"
                })
            });

            const result = await response.json();
            if (result.ok) {
                showStatus("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", "green");
                form.reset();
            } else {
                showStatus("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + result.description, "red");
            }
        } catch (error) {
            showStatus("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: " + error.message, "red");
        }
    });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {string} message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} color –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
 */
function showStatus(message, color) {
    const statusMessage = document.getElementById("status");
    statusMessage.textContent = message;
    statusMessage.style.color = color;
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ".
 */
function setupBetaTestToggle() {
    const betaTestCheckbox = document.getElementById("beta-test");
    const emailField = document.getElementById("email");
    const emailContainer = document.getElementById("email-container");
    const emailLabel = document.getElementById("email-label");

    if (!betaTestCheckbox || !emailField || !emailContainer || !emailLabel) return;

    function toggleEmailField() {
        if (betaTestCheckbox.checked) {
            emailContainer.style.display = "none";
            emailField.disabled = true;
            emailField.required = false;
            emailLabel.style.opacity = "0.5";
        } else {
            emailContainer.style.display = "block";
            emailField.disabled = false;
            emailField.required = true;
            emailLabel.style.opacity = "1";
        }
    }

    betaTestCheckbox.addEventListener("change", function () {
        toggleEmailField();
        if (this.checked) {
            alert("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ, –≤–≤–æ–¥–∏—Ç—å email –Ω–µ –Ω—É–∂–Ω–æ.");
        }
    });

    document.getElementById("contact-form").addEventListener("submit", function (event) {
        if (betaTestCheckbox.checked) {
            const confirmBeta = confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ?");
            if (!confirmBeta) {
                betaTestCheckbox.checked = false;
                event.preventDefault();
            }
        }
    });

    toggleEmailField();
}
